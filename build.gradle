import org.gradle.crypto.checksum.Checksum

plugins {
	id "distribution"
	id "com.github.johnrengelman.shadow" version "8.0.0"
	id "java"
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id "io.toolebox.git-versioner" version "1.6.5"
	id 'org.gradle.crypto.checksum' version '1.4.0'
	id "com.diffplug.spotless" version "6.13.0" // can't go higher to still work with Java 8
	id 'com.github.gmazzo.buildconfig' version "3.1.0"
	id "com.dorongold.task-tree" version "2.1.1"
	id "com.geoffgranum.gradle-conventional-changelog" version "0.3.1"
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "org.ajoberstar.grgit" version "4.1.1"
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
	id 'maven-publish'
}

//remove this to see all the missing tags/parameters.
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

repositories {
	mavenCentral()
	//maven { url 'https://jitpack.io' }
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'dev.jbang'
			artifactId = 'jbang-cli'

			from components.java

			pom {
				name = 'JBang CLI'
				description = 'JBang Command Line Interface'
				url = 'https://jbang.dev'
				inceptionYear = '2019'
				licenses {
					license {
						name = 'MIT'
						url = 'https://github.com/jbangdev/jbang/blob/main/LICENSE'
					}
				}
				developers {
					developer {
						id = 'maxandersen'
						name = 'Max Rydahl Andersen'
					}
					developer {
						id = 'quintesse'
						name = 'Tako Schotanus'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/jbangdev/jbang'
					developerConnection = 'scm:git:https://github.com/jbangdev/jbang'
					url = 'http://github.com/jbangdev/jbang'
				}
			}
		}
	}

	repositories {
		maven {
			url = layout.buildDirectory.dir('staging-deploy')
		}
	}
}

sourceSets {
	java9 {
		java {
			srcDirs = ['src/main/java9']
			destinationDirectory.set(file('build/classes/java/main'))
		}
	}
}
sourceSets.main.compileClasspath += sourceSets.java9.output.classesDirs;

dependencies {
	implementation 'com.offbytwo:docopt:0.6.0.20150202'

	implementation 'org.apache.commons:commons-text:1.11.0'
	implementation 'org.apache.commons:commons-compress:1.25.0'
	implementation 'info.picocli:picocli:4.6.3'
	implementation 'io.quarkus.qute:qute-core:1.12.2.Final'
	implementation 'kr.motd.maven:os-maven-plugin:1.7.1'
	implementation 'org.codehaus.plexus:plexus-java:1.2.0'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'org.jsoup:jsoup:1.17.1'
	implementation 'org.codejive:java-properties:0.0.5'

	implementation "org.slf4j:slf4j-nop:1.7.30"
	implementation "org.slf4j:jcl-over-slf4j:1.7.30"
	implementation "org.jboss:jandex:2.2.3.Final"

	implementation "eu.maveniverse.maven.mima:context:2.4.4"
	runtimeOnly    "eu.maveniverse.maven.mima.runtime:standalone-static:2.4.4"

	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.1"
	testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"
	testImplementation "com.github.stefanbirkner:system-rules:1.17.2"
	testImplementation "org.hamcrest:hamcrest-library:2.2"
	testImplementation "com.github.tomakehurst:wiremock-jre8:2.32.0"

	//testImplementation 'com.github.maxandersen.karate:karate-junit:19e06766'
	//testImplementation 'com.github.maxandersen.karate:karate-apache:19e06766'
	//testImplementation 'com.github.maxandersen.karate:karate-netty:19e06766'
}

buildConfig {
	packageName("dev.jbang.util")
	buildConfigField('String', 'NAME', "\"${project.name}\"")
	buildConfigField('String', 'VERSION', provider { "\"${project.version}\"" })
}

// to enable reproducible builds
tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

sonarqube {
	properties {
		property "sonar.projectKey", "jbangdev_jbang"
		property "sonar.organization", "jbangdev"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

spotless {
	lineEndings 'UNIX'
	format 'misc', {
		target '**/*.gradle', '**/*.md', '**/.gitignore'
		targetExclude 'CONTRIBUTORS.md', 'src/main/scripts/container/README.md', 'build/**/*', 'out/**/*'
		// all-contributor bot adds non-indented code
		trimTrailingWhitespace()
		indentWithTabs(4) // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		importOrder 'java', 'javax', 'org', 'com', 'dev.jbang', ''
		removeUnusedImports()
		eclipse().configFile "misc/eclipse_formatting_nowrap.xml"
		targetExclude 'build/**/*'
	}
	format 'xml', {
		targetExclude 'build/test-results', fileTree('.idea')
		target '**/*.xml', '**/*.nuspec'
	}
}

task versionTxt() {
	doLast {
		new File(project.buildDir, "tmp/version.txt").text = project.version
	}
}

def commonSpec = project.copySpec {
	from('examples') {
		include '**/*.java'
		into 'examples'
	}
	from(shadowJar) {
		into 'bin'
	}
	from(project.buildDir.toPath().resolve('tmp')) {
		include 'version.txt'
	}
	from('src/main/scripts') {
		include 'jbang'
		include 'jbang.cmd'
		include 'jbang.ps1'
		into 'bin'
	}
}

distributions {
	main {
		contents {
			with commonSpec
		}
	}
	latest {
		contents {
			with commonSpec
		}
	}
}

latestDistZip {
	archiveFileName = "${project.name}.zip"
}


latestDistTar {
	archiveFileName = "${project.name}.tar"
}

jar {
	manifest {
		attributes(
			'Main-Class': 'dev.jbang.Main',
		)
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked"
}

compileJava9Java {
	sourceCompatibility = 9
	targetCompatibility = 9
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked"
}

shadowJar {
	minimize() {
		//exclude(dependency('org.slf4j:slf4j-api:.*'))
		exclude(dependency('eu.maveniverse.maven.mima.runtime:standalone-static:.*'))
		exclude(dependency('org.slf4j:jcl-over-slf4j:.*'))
		exclude(dependency('org.slf4j:slf4j-nop:.*'))
		exclude(dependency('org.jboss.logging:jboss-logging:.*'))
	}
	mergeServiceFiles()
	manifest {
		attributes 'Main-Class': 'dev.jbang.Main'
	}
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

test {
	useJUnitPlatform()
	//testLogging.showStandardStreams = true

	jacoco {
		enabled = false
	}
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	afterEvaluate {
		executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
	}

	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}


task karateExecute(type: JavaExec) {
	classpath = sourceSets.test.runtimeClasspath
	mainClass = System.properties.getProperty('mainClass')
}

task copyResources(type: Copy) {
	from "${projectDir}/src/main/resources"
	into "${buildDir}/classes/java/main"
}
processResources.dependsOn copyResources


task copyTestResources(type: Copy) {
	from "${projectDir}/itests"
	into "${buildDir}/classes/java/test/itests"
}
processTestResources.dependsOn copyTestResources

task createChecksum(type: Checksum) {
	dependsOn(assembleDist)
	files = files([distZip, latestDistZip, distTar, latestDistTar].outputs.files.flatten())
	outputDir = distZip.destinationDirectory.asFile.get()
	algorithm = Checksum.Algorithm.SHA256
}

task container(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/container/')
	include('*')
	into(buildDir.toString() + '/container')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}

task spec(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/spec/jbang.spec')
	into(buildDir.toString() + '/spec')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}

task chocolatey(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/choco')
	into(buildDir.toString() + '/choco')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}

task copyITests(type: Copy) {
	from "${projectDir}/itests"
	into "${buildDir}/itests"
}

task tag(type: Exec) {
	doFirst {
		println 'Tagging with v' + project.version
		commandLine 'git', 'tag', '-a', 'v' + project.version, '-F', 'CHANGELOG.md'
	}
}

versioner {
	startFrom {
		major = 0
		minor = 0
		patch = 1
	}
	pattern {
		pattern = "%M.%m.%p(.%c)"
	}
	git {
		authentication {
			https {
				token = project.hasProperty('github_token') ? getProperty('github_token') : "unknown_github_token"
			}
		}
	}
}

asciidoctor {
	sourceDir = file('.')
	sources {
		include 'readme.adoc'
	}
	outputDir = file('build/docs')
	logDocuments = true
	baseDirFollowsSourceDir()
}

task clidoc(type: Exec) {
	doFirst {
		println 'Generating cli man pages'
		commandLine 'jbang', '--cp', 'build/libs/jbang.jar', 'docs/genadoc.java', '-d', 'docs/modules/cli', '--force', 'dev.jbang.cli.JBang'
	}
}

//seems crazy we need versionTxt depend on all dist* but
//didn't find better way yet.
distZip.dependsOn(versionTxt)
distTar.dependsOn(versionTxt)

build.dependsOn(latestDistZip)
build.dependsOn(latestDistTar)
build.dependsOn(copyITests)
build.dependsOn(chocolatey)
build.dependsOn(container)
build.dependsOn(spec)
//build.dependsOn(clidoc)

compileJava.dependsOn(copyResources);
compileJava.dependsOn(compileJava9Java);
compileTestJava.dependsOn(compileJava9Java);

// Don't know how to tell shadowJar _not_ to depend on this
shadowJar.dependsOn(copyTestResources);

//fix implicit dependencies
tasks.named("spotlessXml").configure { dependsOn("compileJava") }
tasks.named("spotlessXml").configure { dependsOn("copyResources") }
tasks.named("spotlessXml").configure { dependsOn("processResources") }
tasks.named("spotlessXml").configure { dependsOn("compileTestJava") }
tasks.named("spotlessXml").configure { dependsOn("copyTestResources") }
tasks.named("spotlessXml").configure { dependsOn("chocolatey") }
tasks.named("spotlessXml").configure { dependsOn("copyITests") }

group = "dev.jbang"
sourceCompatibility = '8'
targetCompatibility = '8'
