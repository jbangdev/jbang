package dev.jbang;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

import dev.jbang.cli.BaseCommand;

/**
 * A RunUnit is an interface for classes representing forms of
 * runnable/executable code.
 */
public interface RunUnit {

	/**
	 * Returns the reference to resource to be executed. This contains both the
	 * original reference (which can be a URL or Maven GAV or other kinds of
	 * non-file resource references) and a path to the file that contains the actual
	 * resource (which can be a ephemeral temporary/cached file).
	 */
	ResourceRef getResourceRef();

	/**
	 * Returns the path to the main application JAR file. This can be an existing
	 * JAR file or one that was generated by Jbang.
	 */
	File getJar();

	/**
	 * Returns the requested Java version
	 */
	String javaVersion();

	/**
	 * Returns the resource's description. Returns `Optional.empty()` if no
	 * description is available (or if the description is an empty string).
	 */
	default Optional<String> getDescription() {
		return Optional.empty();
	}

	/**
	 * Returns the list of dependencies that are necessary to add to the classpath
	 * for the application to execute properly.
	 * 
	 * @param props A `Properties` object whose values can be used during dependency
	 *              resolution
	 */
	List<String> getAllDependencies(Properties props);

	/**
	 * Resolves the given list of dependencies
	 *
	 * @param dependencies List of dependencies
	 * @param offline      Determines if we can access the network or not
	 */
	ModularClassPath resolveClassPath(List<String> dependencies, boolean offline);

	static boolean forJar(File backingFile) {
		return backingFile != null && backingFile.toString().endsWith(".jar");
	}

	static boolean forJShell(File backingFile) {
		return backingFile != null && backingFile.toString().endsWith(".jsh");
	}

	static ExtendedRunUnit forResource(String resource) {
		return forResource(resource, null, null, null, null, false, false);
	}

	static ExtendedRunUnit forResource(String resource, List<String> arguments) {
		return forResource(resource, arguments, null, null, null, false, false);
	}

	static ExtendedRunUnit forResource(String resource, List<String> arguments,
			Map<String, String> properties) {
		return forResource(resource, arguments, properties, null, null, false, false);
	}

	static ExtendedRunUnit forResource(String resource, List<String> arguments,
			Map<String, String> properties,
			List<String> dependencies, List<String> classpaths, boolean fresh, boolean forcejsh) {
		ResourceRef resourceRef = ResourceRef.forResource(resource);

		AliasUtil.Alias alias = null;
		if (resourceRef == null) {
			// Not found as such, so let's check the aliases
			alias = AliasUtil.getAlias(null, resource, arguments, properties);
			if (alias != null) {
				resourceRef = ResourceRef.forResource(alias.resolve(null));
				arguments = alias.arguments;
				properties = alias.properties;
				if (resourceRef == null) {
					throw new IllegalArgumentException(
							"Alias " + resource + " from " + alias.catalog.catalogFile + " failed to resolve "
									+ alias.scriptRef);
				}
			}
		}

		// Support URLs as script files
		// just proceed if the script file is a regular file at this point
		if (resourceRef == null || !resourceRef.getFile().canRead()) {
			throw new ExitException(BaseCommand.EXIT_INVALID_INPUT, "Could not read script argument " + resource);
		}

		// note script file must be not null at this point

		RunUnit ru;
		if (resourceRef.getFile().getName().endsWith(".jar")) {
			ru = Jar.prepareJar(resourceRef);
		} else {
			ru = Script.prepareScript(resourceRef);
		}

		ExtendedRunUnit xrunit = new ExtendedRunUnit(ru, arguments, properties);
		xrunit.setForcejsh(forcejsh);
		xrunit.setOriginalRef(resource);
		xrunit.setAlias(alias);
		xrunit.setAdditionalDependencies(dependencies);
		xrunit.setAdditionalClasspaths(classpaths);
		return xrunit;
	}

	static ExtendedRunUnit forScriptResource(ResourceRef resourceRef, List<String> arguments,
			Map<String, String> properties) {
		return forScriptResource(resourceRef, arguments, properties, null, null, false, false);
	}

	static ExtendedRunUnit forScriptResource(ResourceRef resourceRef, List<String> arguments,
			Map<String, String> properties,
			List<String> dependencies, List<String> classpaths, boolean fresh, boolean forcejsh) {
		// note script file must be not null at this point
		RunUnit ru;
		if (resourceRef.getFile().getName().endsWith(".jar")) {
			ru = Jar.prepareJar(resourceRef);
		} else {
			ru = Script.prepareScript(resourceRef);
		}

		ExtendedRunUnit xrunit = new ExtendedRunUnit(ru, arguments, properties);
		xrunit.setForcejsh(forcejsh);
		xrunit.setAdditionalDependencies(dependencies);
		xrunit.setAdditionalClasspaths(classpaths);
		return xrunit;
	}

	static ExtendedRunUnit forScript(String script, List<String> arguments,
			Map<String, String> properties) {
		return forScript(script, arguments, properties, null, null, false, false);
	}

	static ExtendedRunUnit forScript(String script, List<String> arguments,
			Map<String, String> properties,
			List<String> dependencies, List<String> classpaths,
			boolean fresh, boolean forcejsh) {
		RunUnit ru = new Script(script);
		ExtendedRunUnit xrunit = new ExtendedRunUnit(ru, arguments, properties);
		xrunit.setForcejsh(forcejsh);
		xrunit.setAdditionalDependencies(dependencies);
		xrunit.setAdditionalClasspaths(classpaths);
		return xrunit;
	}
}
