package dev.jbang;

import java.io.File;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Properties;

/**
 * A Source is an interface for classes representing different inputs (sources)
 * that can be used as or turned into executable code.
 */
public interface Source {
	String ATTR_BUILD_JDK = "Build-Jdk";
	String ATTR_JBANG_JAVA_OPTIONS = "JBang-Java-Options";
	String ATTR_BOOT_CLASS_PATH = "Boot-Class-Path";
	String ATTR_PREMAIN_CLASS = "Premain-Class";
	String ATTR_AGENT_CLASS = "Agent-Class";

	/**
	 * Returns the reference to resource to be executed. This contains both the
	 * original reference (which can be a URL or Maven GAV or other kinds of
	 * non-file resource references) and a path to the file that contains the actual
	 * resource (which can be a ephemeral temporary/cached file).
	 */
	ResourceRef getResourceRef();

	/**
	 * Returns the path to the main application JAR file. This can be an existing
	 * JAR file or one that was generated by Jbang.
	 */
	File getJar();

	/**
	 * Returns the main class of the application JAR file or `null` if this can't be
	 * determined.
	 */
	default String getMainClass() {
		return null;
	}

	/**
	 * Returns the runtime Java options that should be passed to the `java`
	 * executable when the application gets run.
	 */
	default List<String> getRuntimeOptions() {
		return Collections.emptyList();
	}

	/**
	 * Determines if CDS has been enabled for this Source
	 */
	default boolean enableCDS() {
		return false;
	}

	/**
	 * Returns the requested Java version
	 */
	String javaVersion();

	/**
	 * Returns the resource's description. Returns `Optional.empty()` if no
	 * description is available (or if the description is an empty string).
	 */
	default Optional<String> getDescription() {
		return Optional.empty();
	}

	/**
	 * Returns the list of dependencies that are necessary to add to the classpath
	 * for the application to execute properly.
	 * 
	 * @param props A `Properties` object whose values can be used during dependency
	 *              resolution
	 */
	List<String> getAllDependencies(Properties props);

	/**
	 * Resolves the given list of dependencies
	 *
	 * @param dependencies List of dependencies
	 * @param offline      Determines if we can access the network or not
	 */
	ModularClassPath resolveClassPath(List<String> dependencies, boolean offline);

	static boolean forJar(File backingFile) {
		return backingFile != null && backingFile.toString().endsWith(".jar");
	}

	static boolean forJShell(File backingFile) {
		return backingFile != null && backingFile.toString().endsWith(".jsh");
	}

}
