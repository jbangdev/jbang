{
  "id" : "b521b90d-e98e-4e6b-9090-56913f0ce473",
  "name" : "jbangdev_k8s-cli-java_jbang_kubectl-example",
  "request" : {
    "url" : "/jbangdev/k8s-cli-java/jbang/kubectl-example",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "//#!/usr/bin/env jbang\n// when editing comment out the line above to avoid errors in IDE's.\n// Necessity to have it as kubectl don't recognize it as a script otherwise.\n// See https://github.com/kubernetes/kubectl/issues/822\n\n// client-java for k8s\n//DEPS io.kubernetes:client-java:5.0.0\n// pico for cli\n//DEPS info.picocli:picocli:4.1.4\n// text output table\n//DEPS com.massisframework:j-text-utils:0.3.4\n// to quiet down log4j\n//DEPS org.slf4j:slf4j-nop:1.7.30\n\n\nimport dnl.utils.text.table.TextTable;\nimport io.kubernetes.client.ApiClient;\nimport io.kubernetes.client.ApiException;\nimport io.kubernetes.client.Configuration;\nimport io.kubernetes.client.ProtoClient;\nimport io.kubernetes.client.apis.CoreV1Api;\nimport io.kubernetes.client.models.*;\nimport io.kubernetes.client.proto.V1;\nimport io.kubernetes.client.util.Config;\nimport picocli.CommandLine;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\nimport static picocli.CommandLine.*;\nimport static picocli.CommandLine.Model.*;\n\n@Command(\n        name = \"example\",\n        description = \"An example kubectl plugin\",\n        subcommands = {\n                PodCommand.class,\n                ResourcesCommand.class\n        },\n        mixinStandardHelpOptions=true\n)\npublic class KubectlExample extends Base {\n\n    public static void main(String[] args) {\n        int exitCode = new CommandLine(new KubectlExample()).execute(args);\n        System.exit(exitCode);\n    }\n\n    @Override\n    public Integer call() {\n        cmd.commandLine().usage(cmd.commandLine().getOut());\n        return ExitCode.OK;\n    }\n}\n\nabstract class Base implements Callable<Integer> {\n\n    @Spec CommandSpec cmd;\n\n    java.io.PrintWriter out() {\n        return cmd.commandLine().getOut();\n    }\n    ApiClient client;\n\n    ApiClient getClient() {\n        if(client!=null) return client;\n\n        try {\n            client = Config.defaultClient();\n            Configuration.setDefaultApiClient(client);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Unable to get cluster configuration\", e);\n        }\n        return client;\n    }\n}\n\n@Command(\n        name = \"pod\",\n        description = \"Programmatically accesses pods in a k8s with 'add', 'list' and 'list2'\",\n        mixinStandardHelpOptions = true,\n        subcommands = {\n                PodAddCommand.class,\n                PodListCommand.class,\n                PodList2Command.class\n        }\n)\nclass PodCommand extends Base {\n\n    @Override\n    public Integer call() {\n        cmd.commandLine().usage(cmd.commandLine().getOut());\n        return ExitCode.USAGE;\n    }\n}\n\n\n@Command(\n        name = \"add\",\n        description = \"Adds a pod to a k8s cluster\"\n)\nclass PodAddCommand extends Base {\n\n    @Parameters(index = \"0\")\n    String name;\n\n    @Option(names = {\"-i\", \"--image\"}, description = \"image to use for pod\")\n    String image = \"nginx\";\n\n    @Option(names = {\"-n\", \"--namespace\"}, description = \"namespace to use for pod\")\n    String namespace = \"default\";\n\n    @Override\n    public Integer call() {\n        try {\n            CoreV1Api api = new CoreV1Api(getClient());\n            Map<String, String> labels = new HashMap<>();\n            labels.put(\"app\", \"demo\");\n            V1Pod pod = new V1PodBuilder()\n                    .withNewMetadata()\n                    .withName(name)\n                    .withLabels(labels)\n                    .endMetadata()\n                    .withNewSpec()\n                    .addNewContainer()\n                    .withName(name)\n                    .withImage(image)\n                    .endContainer()\n                    .endSpec()\n                    .build();\n\n            api.createNamespacedPod(namespace, pod, null, null, null);\n            return ExitCode.OK;\n\n        } catch (ApiException e) {\n            throw new IllegalStateException(\"unable to get pod list\", e);\n        }\n\n    }\n}\n\n@Command(\n        name = \"list2\",\n        description = \"lists pods in the cluster using the protoclient approach\"\n)\nclass PodList2Command extends Base {\n\n    @Option(names = {\"-n\", \"--namespace\"}, description = \"namespace to use for getting pods\")\n    String namespace = \"default\";\n\n    @Override\n    public Integer call() {\n\n        ProtoClient pc =  new ProtoClient(getClient());\n\n        ProtoClient.ObjectOrStatus<V1.PodList> list;\n        try {\n            String path = String.format(\"/api/v1/namespaces/%s/pods\", namespace);\n            list = pc.list(V1.PodList.newBuilder(), path);\n\n        } catch (ApiException | IOException e) {\n            throw new IllegalStateException(\"unable to get pod list\", e);\n        }\n\n        if (list.object.getItemsList().size() < 1) {\n            out().println(\"No Pods found\");\n        } else {\n            printTable(list.object);\n        }\n        return ExitCode.OK;\n    }\n\n    private void printTable(V1.PodList podList) {\n        Object[][] data = new Object[podList.getItemsList().size()][];\n        int i = 0;\n        for (V1.Pod item : podList.getItemsList()) {\n            ArrayList<Object> cols = new ArrayList<>();\n            cols.add(item.getMetadata().getName());\n            cols.add(item.getMetadata().getNamespace());\n            data[i++] = cols.toArray();\n        }\n\n        String[] columnNames = {\"Pod Name\", \"namespace\"};\n\n        TextTable tt = new TextTable(columnNames, data);\n        tt.printTable();\n    }\n}\n\n/**\n * PodListCommand is a command for listing pods in a kubernetes cluster.  This class is an example and requires\n * standard kubeconfig setup to work.\n *\n */\n@Command(\n        name = \"list\",\n        description = \"lists pods in the cluster using a structured approach\"\n)\nclass PodListCommand extends Base {\n\n    @Override\n    public Integer call() {\n        ApiClient client;\n        try {\n            client = Config.defaultClient();\n            Configuration.setDefaultApiClient(client);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Unable to get cluster configuration\", e);\n        }\n\n        V1PodList list;\n        try {\n            CoreV1Api api = new CoreV1Api(client);\n            list = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);\n        } catch (ApiException e) {\n            throw new IllegalStateException(\"unable to get pod list\", e);\n        }\n\n        if (list.getItems().size() < 1) {\n            out().println(\"No Pods found\");\n        } else {\n            printTable(list);\n        }\n\n        return ExitCode.OK;\n    }\n\n    /**\n     * Prints the table of pods discovered\n     *\n     * @param list PodList of pods\n     */\n    private static void printTable(V1PodList list) {\n        Object[][] data = new Object[list.getItems().size()][];\n        int i = 0;\n        for (V1Pod item : list.getItems()) {\n            ArrayList<Object> cols = new ArrayList<>();\n            cols.add(item.getMetadata().getName());\n            cols.add(item.getMetadata().getNamespace());\n            data[i++] = cols.toArray();\n        }\n\n        String[] columnNames = {\"Pod Name\", \"namespace\"};\n\n        TextTable tt = new TextTable(columnNames, data);\n        tt.printTable();\n    }\n}\n\n@Command(\n        name = \"resources\",\n        description = \"lists resources in the k8s cluster\"\n)\nclass ResourcesCommand extends Base {\n\n    @Override\n    public Integer call() {\n\n        V1APIResourceList list;\n        try {\n            CoreV1Api api = new CoreV1Api(getClient());\n            list = api.getAPIResources();\n\n        } catch (ApiException e) {\n            throw new IllegalStateException(\"unable to get resource list\", e);\n        }\n\n        if (list.getResources().size() < 1) {\n            out().println(\"No resources found\");\n        } else {\n            printTable(list.getResources());\n        }\n\n        return ExitCode.OK;\n    }\n\n    private void printTable(List<V1APIResource> resources) {\n        Object[][] data = new Object[resources.size()][];\n        int i = 0;\n        for (V1APIResource item : resources) {\n            ArrayList<Object> cols = new ArrayList<>();\n            cols.add(item.getName());\n            cols.add(item.isNamespaced());\n            cols.add(item.getKind());\n            data[i++] = cols.toArray();\n        }\n\n        String[] columnNames = {\"Resource\", \"Namespaced\", \"Kind\"};\n\n        TextTable tt = new TextTable(columnNames, data);\n        tt.printTable();\n    }\n}\n",
    "headers" : {
      "X-Cache" : "MISS",
      "Access-Control-Allow-Origin" : "*",
      "X-Content-Type-Options" : "nosniff",
      "Source-Age" : "0",
      "Date" : "Thu, 24 Apr 2025 16:07:05 GMT",
      "X-Timer" : "S1745510825.184978,VS0,VE226",
      "Via" : "1.1 varnish",
      "Accept-Ranges" : "bytes",
      "X-Frame-Options" : "deny",
      "Strict-Transport-Security" : "max-age=31536000",
      "Cache-Control" : "max-age=300",
      "ETag" : "\"a3fb11a8fd43a31293dd81d3a32c76e08aaf67a551304384f434437737375034\"",
      "X-Served-By" : "cache-mad22040-MAD",
      "Content-Security-Policy" : "default-src 'none'; style-src 'unsafe-inline'; sandbox",
      "Vary" : "Authorization,Accept-Encoding,Origin",
      "Expires" : "Thu, 24 Apr 2025 16:12:05 GMT",
      "Cross-Origin-Resource-Policy" : "cross-origin",
      "X-XSS-Protection" : "1; mode=block",
      "X-Cache-Hits" : "0",
      "X-Fastly-Request-ID" : "c9ccdb5418bd6ffe0b53c96b146848f356b3526b",
      "X-GitHub-Request-Id" : "C230:12B4CA:401C1F:468B68:680A61A7",
      "Content-Type" : "text/plain; charset=utf-8"
    }
  },
  "uuid" : "b521b90d-e98e-4e6b-9090-56913f0ce473",
  "persistent" : true,
  "insertionIndex" : 4
}