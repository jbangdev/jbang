{
  "id" : "772c29f8-3305-473e-9999-95fe8b3d9418",
  "name" : "maxandersen_590b8a0e824faeb3ee7ddfad741ce842_raw_625c3698c5fb01a9cff9b3778019452023bd91ed_checklabeler.java",
  "request" : {
    "url" : "/maxandersen/590b8a0e824faeb3ee7ddfad741ce842/raw/625c3698c5fb01a9cff9b3778019452023bd91ed/checklabeler.java",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n//DEPS com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.2\n//DEPS com.fasterxml.jackson.core:jackson-databind:2.10.2\n//DEPS fr.opensagres.js:minimatch.java:1.1.0\n//DEPS info.picocli:picocli:4.1.4\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.stream.Collectors;\nimport static java.lang.System.*;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n\nimport minimatch.Minimatch;\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\nimport picocli.CommandLine.Help.Ansi;\n\n\n@Command(description=\"Prints matching labels for directories found in folder. Useful to check how labeler will work.\")\npublic class checklabeler implements Callable<Integer> {\n\n    @Parameters(index=\"0\", description=\"Path to .github/labeler.yml\")\n    String yamlFile;\n\n    @Parameters(index=\"1\", defaultValue = \"\", description = \"Path to dump labels for\")\n    String rootDir;\n    \n    @Option(names = \"--only-dirs\", description = \"If set, only print for directories\", defaultValue = \"false\")\n    boolean onlyDirs;\n\n    @Option(names= \"--only-matches\", description = \"Print only matches\")\n    boolean onlyMatches;\n\n    public static void main(String... args) {\n        System.exit(new CommandLine(new checklabeler()).execute(args));\n    }\n\n    private Map<String, List<String>> labelers;\n\n    List<String> findLabels(Path p) {\n        var result = new ArrayList<String>();\n        \n        var item = labelers.entrySet().stream().filter(e -> match(p, e.getValue()))\n        .map(x->x.getKey())\n        .collect(Collectors.joining(\",\"));\n\n        result.add(item);\n\n        if(onlyMatches && item.isEmpty()) {\n            // noop\n        } else {\n            out.println(Ansi.AUTO.string(p + \" @|bold,green,underline \" + result +\"|@\"));\n        }\n        \n        return result;\n    }\n\n    \n    private static boolean match(Path p, List<String> value) {\n        for (String pattern : value) {\n            if(Minimatch.minimatch(p.toFile().getPath(), pattern)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    @SuppressWarnings(\"unchecked\")\n    public Integer call() {\n        var mapper = new ObjectMapper(new YAMLFactory());\n        \n        try {\n            labelers = mapper.readValue(new File(yamlFile), Map.class);\n\n            //out.println(labelers);\n\n            Files.walk(Paths.get(rootDir)).filter(x -> onlyDirs?x.toFile().isDirectory():true).forEach(this::findLabels);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return -1;\n        }\n        return 0;\n    }\n}",
    "headers" : {
      "X-Cache" : "MISS",
      "Access-Control-Allow-Origin" : "*",
      "X-Content-Type-Options" : "nosniff",
      "Source-Age" : "0",
      "Date" : "Thu, 24 Apr 2025 16:09:19 GMT",
      "X-Timer" : "S1745510959.268402,VS0,VE211",
      "Via" : "1.1 varnish",
      "Accept-Ranges" : "bytes",
      "X-Frame-Options" : "deny",
      "Strict-Transport-Security" : "max-age=31536000",
      "Cache-Control" : "max-age=300",
      "ETag" : "\"e9763b5c82f204ed58950572a7e152d9de0989ff46ef39c350fcf97401943c28\"",
      "X-Served-By" : "cache-toj-leto2350052-TOJ",
      "Content-Security-Policy" : "default-src 'none'; style-src 'unsafe-inline'; sandbox",
      "Vary" : "Authorization,Accept-Encoding,Origin",
      "Expires" : "Thu, 24 Apr 2025 16:14:19 GMT",
      "Cross-Origin-Resource-Policy" : "cross-origin",
      "X-XSS-Protection" : "1; mode=block",
      "X-Cache-Hits" : "0",
      "X-Fastly-Request-ID" : "216d4e057f7987eeb8454ea42039ef4727774f69",
      "X-GitHub-Request-Id" : "1546:21C1A9:2E51297:336B003:680A622F",
      "Content-Type" : "text/plain; charset=utf-8"
    }
  },
  "uuid" : "772c29f8-3305-473e-9999-95fe8b3d9418",
  "persistent" : true,
  "insertionIndex" : 9
}